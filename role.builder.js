var creepManager = require('creep.manager');
require('prototype.creep')();

module.exports = function(creep) {

    if (creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {
        creep.memory.building = false;
        creep.ClearDestination();
        creep.say('üîÑ harvest');
    }
    if (!creep.memory.building && creep.store.getFreeCapacity() == 0) {
        creep.memory.building = true;
        creep.ClearDestination();
        creep.say('üöß build');
    }

    if (creep.memory.building) {
        
        if (creep.GetDestination()) {
            var destination = creep.TryReachDestination();
            if (destination) {  
                var construction = Game.getObjectById(destination);
                var errorCode = creep.build(construction);
                if (errorCode == ERR_INVALID_TARGET) {
                    creep.ClearDestination();
                }
            }
        } else {
            var destination = creep.pos.findClosestByPath(creep.room.find(FIND_CONSTRUCTION_SITES, {filter: (structure) => {return structure.my}}));
            if (destination)
                creep.SetDestination(destination.id);
        }
        if (!creep.GetDestination()) 
        {
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—á–µ–≥–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–æ—Ä–æ–≥–∏
            if (creep.memory.paths) {
                // –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ —É–∂–µ —Ä–∞—Å—á–∏—Ç–∞–Ω—ã, 
                // –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Ä–æ–≥—É
                var paths = creep.memory.paths;
                var constructionPos;
                
                for (var path of paths) {
                    for (var point of path) {
                        var errorCode = creep.room.createConstructionSite(point.x, point.y, STRUCTURE_ROAD)
                        if (errorCode == OK) {
                            constructionPos = point;
                            console.log(`No buildings to build, placing a road at x=${point.x} y=${point.y}...`);
                            return;
                        }
                    }
                }
                if (constructionPos)
                    return; 
            } else { 
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –¥–ª—è –¥–æ—Ä–æ–≥ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –∂–∏–∑–Ω–∏ –∫—Ä–∏–ø–∞
                var spawns = creep.room.find(FIND_MY_SPAWNS);
                if (spawns.length) {
                    var energySources = creep.room.find(FIND_SOURCES_ACTIVE); 
                    var i = 0;
                    var paths = [];
                    for (var spawn of spawns) {
                        for (var source of energySources) {
                            const path = spawn.pos.findPathTo(source);
                            paths[i++] = path;
                        }
                    }
                    creep.memory.paths = paths;
                }
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º—Å—è, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è creep.Idle()
            }
            creep.Idle(); 
        }
    }
    else {
        creep.FetchEnergy();
    }
	
};
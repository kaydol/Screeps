
const defRoles = require('definitions.roles')();

/*
    –í –º–∞—Å—Å–∏–≤–µ ROLES —Ö—Ä–∞–Ω—è—Ç—Å—è 
        spawnPriority - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å) –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –≤–∞–∂–Ω–µ–µ
        roleName - —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        originalParts - –º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π,  –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ—è—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ —Ä–æ–ª–∏
        originalAmount - –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø–æ–≤ –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å
        condition - —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–π –∫—Ä–∏–ø —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª—Å—è –¥–ª—è —Å–ø–∞–≤–Ω–∞
*/

const ROLES = {
    HARVESTER : {spawnPriority: 0, roleName: defRoles.HARVESTER, originalParts: [WORK,CARRY,CARRY,MOVE,MOVE], originalAmount: 4, condition: true}, 
    HAULER : {spawnPriority: 1, roleName: defRoles.HAULER, originalParts: [CARRY,MOVE,MOVE,MOVE,MOVE,MOVE], originalAmount: 1, condition: true},
    MINEHEAD : {spawnPriority: 2, roleName: defRoles.MINEHEAD, originalParts: [WORK,WORK,WORK,WORK,CARRY,CARRY,CARRY,CARRY,MOVE], originalAmount: 4, condition: true},
    BUILDER : {spawnPriority: 3, roleName: defRoles.BUILDER, originalParts: [WORK,CARRY,CARRY,MOVE,MOVE], originalAmount: 0, condition: true}, // TODO —Å–ø–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–∏—Ç–ø–æ–∏–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    COBBLER : {spawnPriority: 4, roleName: defRoles.COBBLER, originalParts: [WORK,WORK,CARRY,CARRY,MOVE,MOVE], originalAmount: 2, condition: true},
    UPGRADER : {spawnPriority: 5, roleName: defRoles.UPGRADER, originalParts: [WORK,CARRY,CARRY,MOVE,MOVE], originalAmount: 1, condition: true},
    LONG_DISTANCE_MINER : {spawnPriority: 6, roleName: defRoles.LONG_DISTANCE_MINER, originalParts: [WORK,WORK,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE,MOVE], originalAmount: 9, condition: true},
    CLAIMER : {spawnPriority: 7, roleName: defRoles.CLAIMER, originalParts: [CLAIM,MOVE], originalAmount: 1, condition: true}//,
    //GUARD_
};

// TODO
// Game.gcl 

const _visualizeNextSpawnedUnit = function(role) {
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –æ–≥–ª–∞—à–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ —Å–ø–∞–≤–Ω
    for (let spawnName in Game.spawns) {
        const spawn = Game.spawns[spawnName];
        if(!spawn.spawning) { 
            spawn.room.visual.text(
                'üéâ Next: Ô∏è' + role.roleName,
                spawn.pos.x + 1, 
                spawn.pos.y, 
                {align: 'left', opacity: 0.8});
        }
    }
};

const _determineCreepParts = function(maximumCost, pattern=[], partLimits=[]) {
    let parts = [];
    const costs = new Map();
    costs.set(MOVE, 50).set(WORK, 100).set(CARRY, 50).set(ATTACK, 80).set(RANGED_ATTACK, 150).set(HEAL, 250).set(CLAIM, 600).set(TOUGH, 10);
    if (pattern.length) {
        let cost = 0;
        let i = 0;
        while (cost < maximumCost) {
            cost = 0;
            for (let j = 0; j < parts.length; ++j)
                cost += costs.get(parts[j]);
            
            if (partLimits.length) {
                for(let k = 0; k < partLimits.length; ++k) {
                    //const partName = partLimits[k][0];
                    //const partMaximum = partLimits[k][1];
                }
            }
            
            const nextPart = pattern[i++ % pattern.length];
            if (cost + costs.get(nextPart) <= maximumCost)
                parts = parts.concat(nextPart)
            else
                cost = maximumCost; // –≤–º–µ—Å—Ç–æ break, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—á–µ–º—É-—Ç–æ –∑–¥–µ—Å—å –≤—ã–¥–∞–µ—Ç ERROR Illegal Break Statement
        }
    }
    return parts;
};

const _determineCreepAmount = function(originalAmount, currentParts, originalParts) {
    return Math.max(1, Math.round(currentParts.length / originalParts.length * originalAmount)) ;
};

// —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é ROLES, –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è parts, amount –∏ –∏–∑–º–µ–Ω—è–µ—Ç condition
_getRoles = function(room) {
    
    let copy = _.cloneDeep(ROLES);
    
    copy.HAULER.condition = 
        room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER }).length;
    copy.MINEHEAD.condition = 
        room.controller.level >= 2 && 
        room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER }).length;
    copy.LONG_DISTANCE_MINER.condition = 
        room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER || i.structureType == STRUCTURE_STORAGE }).length &&
        _.filter(Game.flags, (flag) => flag.color == COLOR_YELLOW && !flag.room.controller && !flag.room.controller.my).length 
    copy.CLAIMER.condition = 
        _.filter(Game.flags, (flag) => flag.color == COLOR_YELLOW && !flag.room.controller && !flag.room.controller.my).length;
    
    copy.MINEHEAD.partLimits = [[part=WORK, maxAmount=5, stopBuildingCreepAfterThresholdIsReached=true]];
    
    const amountOfHarvesters = _.filter(Game.creeps, (creep) => creep.room == room && creep.GetRole() == defRoles.HARVESTER).length;
    const energyLimit = amountOfHarvesters > 0 ? room.energyCapacityAvailable : room.energyAvailable;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–∞—Ä–≤–µ—Å—Ç–µ—Ä, –∏ —Ö–æ—É–ª–µ—Ä —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω, –∞ —à–∞—Ö—Ç–µ—Ä–æ–≤ –µ—â–µ –Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –±—É—Ç—ã–ª–æ—á–Ω–æ–µ –≥–æ—Ä–ª—ã—à–∫–æ –≤ —à–∞—Ö—Ç–µ—Ä–∞—Ö
    // –ø–æ—ç—Ç–æ–º—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (amountOfHarvesters > 0) {
        const haulersExist = _.filter(Game.creeps, (creep) => creep.room == room && creep.GetRole() == defRoles.HAULER).length;
        const amountOfMineheads =  _.filter(Game.creeps, (creep) => creep.room == room && creep.GetRole() == defRoles.MINEHEAD).length;
        if (haulersExist && copy.MINEHEAD.amount < amountOfMineheads) {
            copy.MINEHEAD.spawnPriority = -1;
        }
    }
    // TODO —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –Ω–∞ –º–æ—â–Ω–æ—Å—Ç—å —à–∞—Ö—Ç–µ—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –¥–æ–±—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –æ–Ω —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
    // –ù–µ—Ç —Å–º—ã—Å–ª–∞ –¥–µ–ª–∞—Ç—å —à–∞—Ö—Ç–µ—Ä–æ–≤ –±–æ–ª–µ–µ –º–æ—â–Ω—ã–º–∏ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–∞–≤–Ω–∏–º–æ–π —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    // TODO —à–∞—Ö—Ç–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞—á–∞—Ç—å renew'–≤–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ–Ω—å—à–∏—Ç –∏–∑–¥–µ—Ä–∂–∫–∏
    // one WORK part Harvests 2 energy units from a source per tick.
    // source regens is 300 ticks and contains 3000 energy, –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞ 300 —Å–µ–∫—É–Ω–¥ –Ω—É–∂–Ω–æ –¥–æ–±—ã–≤–∞—Ç—å 3–∫ —ç–Ω–µ—Ä–≥–∏–∏, 300 * –∫–æ–ª-–≤–æ —á–∞—Å—Ç–µ–π work = 3000
    
    
    for(let role of Object.values(copy)) {
        role.parts = _determineCreepParts(energyLimit, role.originalParts, role.partLimits);
        role.amount = _determineCreepAmount(role.originalAmount, role.originalParts, role.parts);
    }
    
    return copy;
};

_visualizeCreepAmounts = function(room, creepManagerRoles) {
    let i = 0;
    for(let role of _.sortBy(Object.values(creepManagerRoles),'spawnPriority')) {
        const roleMembers = _.filter(Game.creeps, (creep) => creep.GetRole() == role.roleName);
        let text = role.roleName + ' ' + roleMembers.length + ' / ' + role.amount + ' (' + role.originalAmount + ')';
        room.visual.text(text, 1, 1 + i++, {align: 'left'}); 
    }
}

module.exports = {
    

    VisualizeSpawningUnits: function() {
        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑ —é–Ω–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —Å–ø–∞–≤–Ω–∏—Ç—Å—è
        if(Game.spawns['Spawn1'].spawning) { 
            let spawningCreep = Game.creeps[Game.spawns['Spawn1'].spawning.name];
            Game.spawns['Spawn1'].room.visual.text(
                'üõ†Ô∏è' + spawningCreep.memory.role,
                Game.spawns['Spawn1'].pos.x + 1, 
                Game.spawns['Spawn1'].pos.y, 
                {align: 'left', opacity: 0.8});
        }
    },
    
    ClearDeadCreepsMemory: function() {
        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —É–º–µ—Ä—à–∏—Ö —é–Ω–∏—Ç–æ–≤
        for(let name in Memory.creeps) {
            if(!Game.creeps[name]) {
                delete Memory.creeps[name];
                console.log('May your soul rest in piece, ', name);
            } 
            //else { delete Memory.creeps[name].paths; };
        }
    },
    
    SpawnUnitsIfNeeded: function(debugVisuals=true) {
        
        for (let spawnName in Game.spawns) {
            
            const spawn = Game.spawns[spawnName];
            let roles = _getRoles(spawn.room);
            
            if (debugVisuals) {
                _visualizeCreepAmounts(spawn.room, roles);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ö–≤–∞—Ç–∞—é—â–∏—Ö –∫—Ä–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö spawnPriority
            for(let role of _.sortBy(Object.values(roles),'spawnPriority')) 
            {
                const roleMembers = _.filter(Game.creeps, (creep) => creep.GetRole() == role.roleName);
                if (roleMembers.length < role.amount && role.condition) {
                    const newName = role.roleName + Game.time;
                    let errorCode = spawn.spawnCreep(role.parts, newName, { dryRun: true });
                    if (errorCode == OK) {
                        console.log('Spawning new creep: ' + newName);
                        spawn.spawnCreep(role.parts, newName, { memory: {role: role.roleName, spawner: spawn.name}});
                        return; // –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π return, —á—Ç–æ–±—ã spawnCreep –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Ü–∏–∫–ª–µ (–≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—ã–ª–æ)
                    }
                    if (errorCode == ERR_NOT_ENOUGH_ENERGY) {
                        _visualizeNextSpawnedUnit(role);
                        return; // –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —ç–µ–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–ø–∞–≤–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ (–∂–¥–µ–º –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —ç–Ω–µ—Ä–≥–∏—è)
                    }
                }
            }
        }
    }
};

/*
    –í –º–∞—Å—Å–∏–≤–µ ROLES —Ö—Ä–∞–Ω—è—Ç—Å—è 
        spawnPriority - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å) –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –≤–∞–∂–Ω–µ–µ
        roleName - —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        parts - –º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π,  –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ—è—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ —Ä–æ–ª–∏
        amount - –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø–æ–≤ –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å
        condition - —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–π –∫—Ä–∏–ø —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª—Å—è –¥–ª—è —Å–ø–∞–≤–Ω–∞
*/

ROLES = {
    HARVESTER : {spawnPriority: 0, roleName: 'Harvester', parts: [WORK,CARRY,CARRY,MOVE,MOVE], amount: 3, condition: true}, 
    HAULER : {spawnPriority: 1, roleName: 'Hauler', parts: [CARRY,MOVE,MOVE,MOVE,MOVE,MOVE], amount: 1, condition: 
        Game.spawns['Spawn1'].room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER }).length},
    MINEHEAD : {spawnPriority: 2, roleName: 'Minehead', parts: [WORK,WORK,WORK,WORK,CARRY,CARRY,CARRY,CARRY,MOVE], amount: 4, condition: 
        Game.spawns['Spawn1'].room.controller.level >= 2 && 
        Game.spawns['Spawn1'].room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER }).length},
    BUILDER : {spawnPriority: 3, roleName: 'Builder', parts: [WORK,CARRY,CARRY,MOVE,MOVE], amount: 6, condition: true}, // TODO —Å–ø–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–∏—Ç–ø–æ–∏–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    COBBLER : {spawnPriority: 4, roleName: 'Cobbler', parts: [WORK,WORK,CARRY,CARRY,MOVE,MOVE], amount: 2, condition: true},
    UPGRADER : {spawnPriority: 5, roleName: 'Upgrader', parts: [WORK,CARRY,CARRY,MOVE,MOVE], amount: 4, condition: true},
    LONG_DISTANCE_MINER : {spawnPriority: 6, roleName: 'LongDistanceMiner', parts: [WORK,WORK,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE,MOVE], amount: 4, condition: 
        Game.spawns['Spawn1'].room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER || i.structureType == STRUCTURE_STORAGE }).length &&
        _.filter(Game.flags, (flag) => flag.color == COLOR_YELLOW).length 
    },
    CLAIMER : {spawnPriority: 7, roleName: 'Claimer', parts: [CLAIM,MOVE], amount: 0, condition: 
        _.filter(Game.flags, (flag) => flag.color == COLOR_YELLOW).length 
    }
};
// TODO
// Use Room.energyAvailable and Room.energyCapacityAvailable to determine how much energy all the spawns and extensions in the room contain.
// Game.gcl 

const _visualizeNextSpawnedUnit = function(role) {
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –æ–≥–ª–∞—à–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ —Å–ø–∞–≤–Ω
    if(!Game.spawns['Spawn1'].spawning) { 
        Game.spawns['Spawn1'].room.visual.text(
            'üéâ Next: Ô∏è' + role.roleName,
            Game.spawns['Spawn1'].pos.x + 1, 
            Game.spawns['Spawn1'].pos.y, 
            {align: 'left', opacity: 0.8});
    }
};
    
module.exports = {
    
    VisualizeSpawningUnits: function() {
        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑ —é–Ω–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —Å–ø–∞–≤–Ω–∏—Ç—Å—è
        if(Game.spawns['Spawn1'].spawning) { 
            let spawningCreep = Game.creeps[Game.spawns['Spawn1'].spawning.name];
            Game.spawns['Spawn1'].room.visual.text(
                'üõ†Ô∏è' + spawningCreep.memory.role,
                Game.spawns['Spawn1'].pos.x + 1, 
                Game.spawns['Spawn1'].pos.y, 
                {align: 'left', opacity: 0.8});
        }
    },
    
    ClearDeadCreepsMemory: function() {
        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —É–º–µ—Ä—à–∏—Ö —é–Ω–∏—Ç–æ–≤
        for(let name in Memory.creeps) {
            if(!Game.creeps[name]) {
                delete Memory.creeps[name];
                console.log('Clearing non-existing creep memory: ', name);
            } 
            //else { delete Memory.creeps[name].paths; };
        }
    },
    
    SpawnUnitsIfNeeded: function() {
        
        const spawn = Game.spawns['Spawn1'];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ö–≤–∞—Ç–∞—é—â–∏—Ö –∫—Ä–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö spawnPriority
        for(let role of _.sortBy(Object.values(ROLES),'spawnPriority')) {
            const roleMembers = _.filter(Game.creeps, (creep) => creep.GetRole() == role.roleName);
            // TODO –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ <= –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É —é–Ω–∏—Ç–∞"
            if(roleMembers.length < role.amount && role.condition) {
                const newName = role.roleName + Game.time;
                let errorCode = spawn.spawnCreep(role.parts, newName, { dryRun: true });
                if (errorCode == OK) {
                    console.log('Spawning new creep: ' + newName);
                    spawn.spawnCreep(role.parts, newName, { memory: {role: role.roleName, spawner: spawn.name}});
                    return; // –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π return, —á—Ç–æ–±—ã spawnCreep –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Ü–∏–∫–ª–µ (–≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—ã–ª–æ)
                }
                if (errorCode == ERR_NOT_ENOUGH_ENERGY) {
                    _visualizeNextSpawnedUnit(role);
                    return; // –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —ç–µ–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–ø–∞–≤–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ (–∂–¥–µ–º –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —ç–Ω–µ—Ä–≥–∏—è)
                }
            }
        }
    },
    
    Roles: ROLES
};
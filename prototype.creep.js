var creepManager = require('creep.manager');

/*
    –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä—è—é—Ç –∫–ª–∞—Å—Å Creep
*/

module.exports = function() {
    
    Creep.prototype.GetDestination = function() {
        return this.memory.destination;
    },
    
    Creep.prototype.SetDestination = function(destination) {
        this.memory.destination = destination;
    },

    Creep.prototype.TryReachDestination = function() {
        var creep = this;
        var destination = Game.getObjectById(creep.memory.destination);
        if (destination) {
            if (!creep.pos.isNearTo(destination)) {
                creep.moveTo(destination, {visualizePathStyle: {stroke: '#ffaa00'}});
                return false;
            } else {
                delete creep.memory.destination;
                return destination.id;
            }
        } else {
            delete creep.memory.destination;
            return false;
        };
    },
    
    Creep.prototype.FetchEnergy = function() {
        var creep = this;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –µ—Ö–∞—Ç—å –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º 1 —Ä–∞–∑, –ø–æ—Å–ª–µ –ø—Ä–∏–µ–∑–¥–∞ –Ω–∞ –º–µ—Å—Ç–æ —Å—Ç–æ–∏–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è
        var destination = Game.getObjectById(creep.memory.destination);
    
        if (destination) {
            if (!creep.pos.isNearTo(destination)) {
                creep.moveTo(destination, {visualizePathStyle: {stroke: '#ffaa00'}});
                return;
            } else {
                if (creep.store.getFreeCapacity() > 0 && !(creep.withdraw(destination, RESOURCE_ENERGY) == OK || creep.harvest(destination) == OK)) {
                    creep.say('ü§î '); // –ø—Ä–∏–µ—Ö–∞–ª–∏ –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏, –∞ –∏—Ö —Ç–∞–º –Ω–µ—Ç. –ï–¥–µ–º –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ
                } else {
                    delete creep.memory.destination;
                }
            }
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
        var containers = creep.room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER });
        var containersWithEnergy = creep.room.find(FIND_STRUCTURES, { filter: (i) => i.structureType == STRUCTURE_CONTAINER && i.store[RESOURCE_ENERGY] > 0 });
        var mineheads = _.filter(Game.creeps, (c) => c.memory.role == creepManager.Roles.MINEHEAD.roleName);
        
        if (containers.length && mineheads.length) {
            if (containersWithEnergy.length) {
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ–¥–µ–º –∫ –Ω–µ–º—É
                var closest = creep.pos.findClosestByPath(containersWithEnergy);
                creep.memory.destination = closest.id;
            } 
        } else {
             // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ —à–∞—Ö—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –Ω–∞–ø–æ–ª–Ω—è—é—Ç, –µ–¥–µ–º –∫ –±–ª–∏–∂–∞–π—â–µ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
            var closest = creep.pos.findClosestByPath(FIND_SOURCES_ACTIVE);
            creep.memory.destination = closest.id;
        }
    },
    
    Creep.prototype.Idle = function() {
        var creep = this;
        creep.say('Idle');
        creep.moveTo(creep.pos.findClosestByPath(FIND_MY_SPAWNS));
    },
    
    Creep.prototype.GetRole = function() {
        return this.memory.role;
    }
};

module.exports = function(creep) {
    
	if (creep.RenewIfNeeded(300, true)) {
        return;
    }
	
	const PULL_THRESHOLD = 2;
	
    if (!creep.memory.harvesting && creep.store[RESOURCE_ENERGY] == 0) {
        creep.memory.harvesting = true;
        creep.say('‚õè harvest');
    }
    if (creep.memory.harvesting && creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {
        creep.memory.harvesting = false;
        creep.say('üì¶ deliver');
    }

    if (!creep.memory.harvesting) {
        // –®–∞—Ö—Ç–µ—Ä –∑–∞–ø–æ–ª–Ω–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω–µ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        const closest = creep.FindClosestStorage(creep.room, [STRUCTURE_CONTAINER], canBeFull=true);
        if (closest) {
            let errorCode;
            // –ß–∏–Ω–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (closest.hits < closest.hitsMax) {
                errorCode = creep.repair(closest);
            }
            if (errorCode == OK) {
                creep.say('Fixing');
                creep.ClearPullTowards();
                return;
            }
            
            // –ï—Å–ª–∏ —à–∞—Ö—Ç–µ—Ä –¥–∞–ª–µ–∫–æ –æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–¥—Ç–æ–ª–∫–Ω—É—Ç—å
            let distance = creep.pos.getRangeTo(closest);
            
            if (distance > PULL_THRESHOLD)
                creep.SetPullTowards(closest);
            else
                creep.ClearPullTowards();
            
            if (errorCode == ERR_NOT_IN_RANGE) {
                creep.moveTo(closest, {visualizePathStyle: {stroke: '#ffffff'}});
                return;
            }
            
            errorCode = creep.transfer(closest, RESOURCE_ENERGY);
            
            if (errorCode == ERR_NOT_IN_RANGE) {
                creep.moveTo(closest, {visualizePathStyle: {stroke: '#ffffff'}});
                return;
            }
            
            if (errorCode == ERR_FULL) {
                creep.say('üòä Full');
            }
        } else {
            creep.Idle();
        }
    }
    else {
        if (!creep.GetBoundSource()) {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—Ä–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –±—É–¥–µ—Ç —Ç—Ä—É–¥–∏—Ç—å—Å—è –≤—Å—é –∂–∏–∑–Ω—å
            const currentRoom = creep.room;
	        // –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
	        const sources = _.filter(currentRoom.find(FIND_SOURCES), 
	            (source) => source.pos.findInRange(FIND_STRUCTURES, 3, {
                    filter: { structureType: STRUCTURE_CONTAINER }
                }).length
            );
	        
	        let dictionary = new Map(sources.map(src => [src.id, 0]));
	        
	        // –°–º–æ—Ç—Ä–∏–º –ø–æ —Å–∫–æ–ª—å–∫–æ –∫—Ä–∏–ø–æ–≤ –∑–∞–±–∏–Ω–¥–µ–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            for (let name in Memory.creeps) {
                if (Game.creeps[name]) {
                    let src = Game.creeps[name].GetBoundSource();
                    if (src && dictionary.has(src)) {
                        dictionary.set(src, dictionary.get(src) + 1);
                    }
                }
            }
            
            // TODO –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ > 1 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å 0 —Ä–∞–±–æ—á–∏–º–∏, –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ
            
	        // –í—ã–±–∏—Ä–∞–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—á–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–µ–π—á–∞—Å –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö
	        const sourceWithTheLeastWorkers = [...dictionary.entries()].reduce((a, e) => e[1] < a[1] ? e : a);
	        creep.SetBoundSource(sourceWithTheLeastWorkers[0]);
	        creep.SetPullTowards(sourceWithTheLeastWorkers[0]);
	        console.log('The chosen source is '+sourceWithTheLeastWorkers);
	        
	        
        } else {
            // –£ –∫—Ä–∏–ø–∞ –µ—Å—Ç—å —Å–≤–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
            const src = creep.GetBoundSourceObject();
            
            // –ï—Å–ª–∏ —à–∞—Ö—Ç–µ—Ä –¥–∞–ª–µ–∫–æ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–¥—Ç–æ–ª–∫–Ω—É—Ç—å
            let distance = creep.pos.getRangeTo(src);
            
            if (distance > PULL_THRESHOLD)
                creep.SetPullTowards(src.id);
            else
                creep.ClearPullTowards();
                
            let errorCode = creep.harvest(src);
            
            if (errorCode == ERR_NOT_IN_RANGE) {
                creep.moveTo(src, {visualizePathStyle: {stroke: '#ffaa00'}});
            }
            if (errorCode == ERR_NOT_ENOUGH_RESOURCES) {
                creep.say('üïí');
            }
        }
    }
};
